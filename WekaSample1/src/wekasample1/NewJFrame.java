/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wekasample1;



import weka.core.Instances;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import weka.classifiers.Classifier;
import weka.classifiers.Evaluation;
import weka.classifiers.evaluation.NominalPrediction;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.PART;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.J48;
import weka.core.FastVector;



/**
 *
 * @author HASNA
 */
class MyCustomFilter extends javax.swing.filechooser.FileFilter
{
    @Override
    public boolean accept (File file)
    {
        return file.isDirectory()||file.getAbsolutePath().endsWith(".arff");
    }
    @Override
    public String getDescription()
    {
        return "Attribute-relation file (*.arff)";
    }
};
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public static Instances[][]crossValidationSplit(Instances data, int numberOfFolds)
    {
        
        Instances[][] split=new Instances[2][numberOfFolds];
        for(int i=0;i<numberOfFolds;i++)
        {
            split[0][i]=data.trainCV(numberOfFolds, i);
            split[1][i]=data.testCV(numberOfFolds, i);
        }
        return split;
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        open = new javax.swing.JMenuItem();
        exit = new javax.swing.JMenuItem();

        fileChooser.setFileFilter(new MyCustomFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        jMenu1.setText("File");

        open.setText(" Open");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });
        jMenu1.add(open);

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        jMenu1.add(exit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
        // TODO add your handling code here:
        int returnVal=fileChooser.showOpenDialog(this);
        if(returnVal==JFileChooser.APPROVE_OPTION)
        {
            File file= fileChooser.getSelectedFile();
           
            try
            {
                //textArea.read(new FileReader(file.getAbsolutePath()), null);
                textArea.setText("Analysis Started...");
                BufferedReader reader=new BufferedReader(new FileReader(file.getAbsolutePath()));
                Instances data=new Instances(reader);
                //textArea.append("Data from dataset:\n"+data);
                reader.close();
                data.setClassIndex(data.numAttributes()-1);
                
                textArea.append("\nCross-Validation in progress...");
                Instances[][] split=crossValidationSplit(data,10);
                Instances[] trainingSplits=split[0];
                Instances[] testingSplits=split[1];
                
                textArea.append("\nSelecting Classification Models...");
                Classifier[] models={
                                    new J48(),
                                    new PART(),
                                    new DecisionTable(),
                                    new DecisionStump()
                                  };
                textArea.append("\nClassification Started...");
                for(int j=0;j<models.length;j++)
                {
                    FastVector predictions=new FastVector();
                    
                    for(int i=0;i<trainingSplits.length;i++)
                    {
                        Evaluation validation=classify(models[j],trainingSplits[i],testingSplits[i]);
                        predictions.appendElements(validation.predictions());
                        
                    }
                    
                    double accuracy=calculateAccuracy(predictions);
                    
                    //System.out.println("Accuracy of"+ models[j].getClass().getSimpleName()+":"+ String.format("%.2f%%", accuracy)+"\n-----------------" );
                    textArea.append("\nAccuracy of "+ models[j].getClass().getSimpleName()+": "+ String.format("%.2f%%", accuracy)+"\n--------------");
                }
                textArea.append("Classification Ended...");
            }
            catch(IOException ex)
            {
                System.out.println("Error reading the file"+file.getAbsolutePath());
            } catch (Exception ex) {
                textArea.append("Error on models");
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            System.out.println("User cancelled the action");
        }

    }//GEN-LAST:event_openActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem exit;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem open;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables

    private Evaluation classify(Classifier model, Instances trainingSet, Instances testingSet) throws Exception {
         //To change body of generated methods, choose Tools | Templates.
        
        Evaluation evaluation=new Evaluation(trainingSet);
        model.buildClassifier(trainingSet);
        evaluation.evaluateModel(model, testingSet);
        
        return evaluation;
    }

    private double calculateAccuracy(FastVector predictions)  {
         //To change body of generated methods, choose Tools | Templates.
        
        double correct=0;
        
        for(int i=0;i<predictions.size();i++)
        {
            NominalPrediction np=(NominalPrediction)predictions.elementAt(i);
            if(np.predicted()==np.actual())
            {
                correct++;
                textArea.append("\nPrediction success: "+np.toString());
            }
        }
        
        return 100*correct/predictions.size();
    }
}
